# Bobby config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term foot
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
set $menu bemenu-run

# Workspaces
set $ws1 "1:"
set $ws2 "2:"
set $ws3 "3:"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7:"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10:"

### Output configuration
#
# Default wallpaper (more resolutions are available in /usr/local/share/backgrounds/sway/)
output * bg /usr/share/backgrounds/sway/Sway_Wallpaper_Blue_1920x1080.png fill

# Disable the laptop screen when the lid is closed.
bindswitch --reload lid:on output eDP-1 disable
bindswitch --reload lid:off output eDP-1 enable

#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Window borders
#
default_border pixel 2
default_floating_border normal
hide_edge_borders smart

#smart_gaps on
#gaps inner 10

### Idle configuration
#
# Example configuration:
#
set $locker 'swaylock -f -i ~/Pictures/Finishline.JPG'
exec swayidle -w \
         timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
         timeout 605 $locker \
         before-sleep $locker \
	 lock $locker
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

#
### Input configuration
#
    input type:keyboard {
        xkb_layout se
        xkb_variant nodeadkeys
        repeat_delay 250
        repeat_rate 22
    }

   ## The laptop keyboard
   input "1:1:AT_Translated_Set_2_keyboard" {
        xkb_options "caps:swapescape"
   }

   ## The laptop touchpad
   input type:touchpad {
       pointer_accel 0.18
       #accel_profile flat
       #dwt enabled
       tap enabled
       natural_scroll enabled
       middle_emulation enabled
   }

# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term

    # Kill focused window
    bindsym $mod+Shift+q kill

    # Start your launcher
    bindsym $mod+d exec $menu
    bindsym $mod+r exec albert toggle

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    set $mode_system System: (l) lock, (e) exit sway, (c) reload conf, (s) suspend, (r) reboot, (S) shutdown, (R) reboot to BIOS, (Ctrl+R) Boot selection
    mode "$mode_system" {
        bindsym l exec $locker, mode "default"
        bindsym e exit
	bindsym c reload
        bindsym s exec systemctl suspend, mode "default"
        bindsym r exec systemctl reboot, mode "default"
        bindsym Shift+s exec systemctl poweroff -i, mode "default"
        bindsym Shift+r exec systemctl reboot --firmware-setup, mode "default"
        bindsym Control+Shift+r exec systemctl reboot --boot-loader-menu=10, mode "default"
    
        # return to default mode
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+Shift+e mode "default"
    }
    bindsym $mod+Shift+e mode "$mode_system"
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right

#
# Media controls
#
# Use pactl to adjust volume in PulseAudio.
set $refresh_i3status killall -SIGUSR1 python3
bindsym --locked XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym --locked XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym --locked XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym --locked XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

bindsym --locked XF86MonBrightnessDown exec brightnessctl set 5%-
bindsym --locked XF86MonBrightnessUp exec brightnessctl set +5%

bindsym --locked XF86Display exec toggle-sway-output.sh eDP-1

# Screenshot
# Select part of the screen
bindsym Print exec grim -g "$(slurp)" - | wl-copy
# Current Window
bindsym Mod1+Print exec grim -g "$(swaymsg -t get_tree | jq -r '.. | select(.focused?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"')" - | wl-copy
bindsym Shift+Print exec grim - | wl-copy

#
# Workspaces:
#
    # Switch to workspace
    bindsym $mod+1 workspace number $ws1
    bindsym $mod+2 workspace number $ws2
    bindsym $mod+3 workspace number $ws3
    bindsym $mod+4 workspace number $ws4
    bindsym $mod+5 workspace number $ws5
    bindsym $mod+6 workspace number $ws6
    bindsym $mod+7 workspace number $ws7
    bindsym $mod+8 workspace number $ws8
    bindsym $mod+9 workspace number $ws9
    bindsym $mod+0 workspace number $ws10
    # Move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace number $ws1
    bindsym $mod+Shift+2 move container to workspace number $ws2
    bindsym $mod+Shift+3 move container to workspace number $ws3
    bindsym $mod+Shift+4 move container to workspace number $ws4
    bindsym $mod+Shift+5 move container to workspace number $ws5
    bindsym $mod+Shift+6 move container to workspace number $ws6
    bindsym $mod+Shift+7 move container to workspace number $ws7
    bindsym $mod+Shift+8 move container to workspace number $ws8
    bindsym $mod+Shift+9 move container to workspace number $ws9
    bindsym $mod+Shift+0 move container to workspace number $ws10 

    bindsym $mod+Control+Shift+Right move workspace to output right
    bindsym $mod+Control+Shift+Left move workspace to output left
    bindsym $mod+Control+Shift+Down move workspace to output down
    bindsym $mod+Control+Shift+Up move workspace to output up

    # Output assignments
    workspace $ws1 output DP-2 eDP-1
    workspace $ws2 output DP-2 eDP-1
    workspace $ws10 output DP-2 eDP-1

    # Workspace switchers
    assign [class="Google-chrome"] → $ws1
    assign [app_id="firefox"] → $ws1
    assign [class="jetbrains-goland"] → $ws2
    assign [class="jetbrains-idea-ce"] → $ws2
    assign [class="jetbrains-idea"] → $ws2
    assign [class="jetbrains-clion"] → $ws2
    assign [class="(?i)Slack"] → $ws10
    assign [app_id="Google-chrome" title="Slack.*"] → $ws10
    assign [class="(?i)jetbrains-datagrip"] → $ws7
    assign [class="(?i)spotify"] → $ws9
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
#    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+s move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+s scratchpad show

    for_window [app_id="scratchpad"] floating enable, move to scratchpad
    exec foot --app-id scratchpad --window-size-pixels 1200x800
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+Shift+r mode "resize"


# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
bar {
    position top

    status_command /usr/bin/bumblebee-status -m github nic battery pasink pasource date time -p date.format="%d %b" -p time.format="%H:%M" -t solarized -p nic.include="wlan0" -p nic.exclude="enp0s31f6,enp8s0u2u1u2,docker0,lo" -p nic.format="{ssid}" -p nic.left-click="foot --app-id=iwctl iwctl" -p pulseaudio.limit="110" -t solarized-dark-awesome -p github.token="${GITHUB_TOKEN}" -p github.reasons="review_requested"
    #swaybar_command waybar

    colors {
        separator #002b36
        statusline #fdf6e3
        background #002b36
        focused_workspace #859900 #859900 #002b36
        active_workspace #268bd2 #268bd2 #002b36
        urgent_workspace #cb4b16 #cb4b16 #002b36
        inactive_workspace #002b36 #002b36 #fdf6e3
        binding_mode #859900 #859900 #002b36
    }
}
#
# Application specific settings
#
for_window [app_id="albert"] floating enable
for_window [title="win0" class="jetbrains-goland"] floating enable
for_window [title="win0" class="jetbrains-idea-ce"] floating enable
for_window [title="win0" class="jetbrains-idea"] floating enable
for_window [title="win0" class="jetbrains-clion"] floating enable

#
# Application starters
#
exec albert                        # App launcher
#exec foot -s                       # Foot in server mode

# Needed xdg-desktop-portal
exec dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP XDG_SESSION_TYPE


include /etc/sway/config.d/*
include ~/.config/sway/$(hostname)/*
